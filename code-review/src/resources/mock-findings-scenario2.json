[
  {
    "ruleId": "SEC010",
    "category": "Security",
    "message": "Insecure random number generation",
    "severity": "HIGH",
    "lineNumber": 55,
    "codeSnippet": "Random rand = new Random();",
    "suggestion": "Use SecureRandom for cryptographic operations"
  },
  {
    "ruleId": "CODE008",
    "category": "Code Quality",
    "message": "Unused import statement",
    "severity": "LOW",
    "lineNumber": 5,
    "codeSnippet": "import java.util.ArrayList;",
    "suggestion": "Remove unused imports to keep code clean"
  },
  {
    "ruleId": "PERF003",
    "category": "Performance",
    "message": "Inefficient loop detected",
    "severity": "MEDIUM",
    "lineNumber": 105,
    "codeSnippet": "for (int i = 0; i < list.size(); i++) { ... }",
    "suggestion": "Cache list.size() or use enhanced for loop"
  },
  {
    "ruleId": "PERF007",
    "category": "Performance",
    "message": "String concatenation in loop",
    "severity": "MEDIUM",
    "lineNumber": 134,
    "codeSnippet": "result += item;",
    "suggestion": "Use StringBuilder for string concatenation in loops"
  },
  {
    "ruleId": "CODE011",
    "category": "Code Quality",
    "message": "Empty catch block",
    "severity": "HIGH",
    "lineNumber": 92,
    "codeSnippet": "catch (Exception e) { }",
    "suggestion": "Handle exceptions properly or at least log them"
  },
  {
    "ruleId": "STYLE012",
    "category": "Style",
    "message": "Magic number detected",
    "severity": "LOW",
    "lineNumber": 67,
    "codeSnippet": "if (count > 100) { ... }",
    "suggestion": "Extract magic numbers to named constants"
  }
]
